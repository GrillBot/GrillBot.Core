name: Build and push to NuGet

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  CheckNugetPublishPossibility:
    runs-on: ubuntu-latest
    outputs:
      CorePackage: ${{ steps.filter.outputs.CorePackage }}
      ServicesPackage: ${{ steps.filter.outputs.ServicesPackage }}
      RabbitMQPackage: ${{ steps.filter.outputs.RabbitMQpackage }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Paths filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            CorePackage:
              - 'GrillBot.Core/GrillBot.Core.csproj'
            ServicesPackage:
              - 'GrillBot.Core.Services/GrillBot.Core.Services.csproj'
            RabbitMQPackage:
              - 'GrillBot.Core.RabbitMQ/GrillBot.Core.RabbitMQ.csproj'
  BuildCorePackage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Build as Debug
        run: dotnet build -c Debug --no-self-contained GrillBot.Core/;
          dotnet build -c Debug --no-self-contained GrillBot.Core.Tests/
      - name: Build as Release
        run: dotnet build -c Release --no-self-contained GrillBot.Core/;
          dotnet build -c Release --no-self-contained GrillBot.Core.Tests/
      - name: Run unit tests
        run: dotnet test -c Debug GrillBot.Core.Services/
  PublishCorePackage:
    runs-on: ubuntu-latest
    needs: [BuildCorePackage, CheckNugetPublishPossibility]
    if: github.ref == 'refs/heads/master' && needs.CheckNugetPublishPossibility.outputs.CorePackage == 'true'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 GrillBot.Core/
      - name: Build
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore GrillBot.Core/
      - name: Create the package
        run: dotnet pack -c Release GrillBot.Core/
      - name: Publish the package to GPR
        run: dotnet nuget push GrillBot.Core/bin/Release/*.nupkg --skip-duplicate
  BuildServicesPackage:
    runs-on: ubuntu-latest
    needs: [BuildCorePackage, BuildRabbitMQPackage]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Build as Debug
        run: dotnet build -c Debug --no-self-contained GrillBot.Core.Services/
      - name: Build as Release
        run: dotnet build -c Release --no-self-contained GrillBot.Core.Services/
  PublishServicesPackage:
    runs-on: ubuntu-latest
    needs: [BuildServicesPackage, CheckNugetPublishPossibility]
    if: github.ref == 'refs/heads/master' && needs.CheckNugetPublishPossibility.outputs.ServicesPackage == 'true'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 GrillBot.Core.Services/
      - name: Build
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore GrillBot.Core.Services/
      - name: Create the package
        run: dotnet pack -c Release GrillBot.Core.Services/
      - name: Publish the package to GPR
        run: dotnet nuget push GrillBot.Core.Services/bin/Release/*.nupkg --skip-duplicate
  BuildRabbitMQPackage:
    runs-on: ubuntu-latest
    needs: BuildCorePackage
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Build as Debug
        run: dotnet build -c Debug --no-self-contained GrillBot.Core.RabbitMQ/
      - name: Build as Release
        run: dotnet build -c Release --no-self-contained GrillBot.Core.RabbitMQ/
  PublishRabbitMQPackage:
    runs-on: ubuntu-latest
    needs: [BuildRabbitMQPackage, CheckNugetPublishPossibility]
    if: github.ref == 'refs/heads/master' && needs.CheckNugetPublishPossibility.outputs.RabbitMQPackage == 'true'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 GrillBot.Core.RabbitMQ/
      - name: Build
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore GrillBot.Core.RabbitMQ/
      - name: Create the package
        run: dotnet pack -c Release GrillBot.Core.RabbitMQ/
      - name: Publish the package to GPR
        run: dotnet nuget push GrillBot.Core.RabbitMQ/bin/Release/*.nupkg --skip-duplicate
