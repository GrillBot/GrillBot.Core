name: Build and push to NuGet

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  DetectChangedPackages:
    runs-on: ubuntu-latest
    outputs:
      DeploymentMatrix: ${{ steps.detect_packages.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: gitdiff
        run: |
          changed=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | xargs)
          echo "changed_files=$changed" >> $GITHUB_OUTPUT

      - name: Detect changed NuGet packages
        id: detect_packages
        shell: bash
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          declare -A unique_packages=()
          package_list_array=()

          changed_files=$(echo "${{ steps.gitdiff.outputs.changed_files }}" | tr '\n' ' ')

          for file in $changed_files; do
            # Check if it's a .csproj file in a top-level folder
            if [[ "$file" =~ ^([^/]+)/[^/]*\.csproj$ ]]; then
              # Exclude folders with ".Tests" in the name or ending with ".Shared"
              if [[ "$folder" != *".Tests"* && "$folder" != *".Shared" ]]; then
                folder="${BASH_REMATCH[1]}"
                if [[ -z "${unique_packages[$folder]+x}" ]]; then
                  unique_packages["$folder"]=1
                  package_list_array+=("\"$folder\"")
                fi
              fi
            fi
          done

          packages_json="[$(IFS=,; echo "${package_list_array[*]}")]"
          echo "packages=$packages_json" >> $GITHUB_OUTPUT

      - name: Dump detected packages
        run: |
          echo "Detected packages: ${{ steps.detect_packages.outputs.packages }}"
  BuildPackages:
    runs-on: ubuntu-latest
    needs: [DetectChangedPackages]
    if: ${{ needs.DetectChangedPackages.outputs.DeploymentMatrix != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJson(needs.DetectChangedPackages.outputs.DeploymentMatrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Build ${{ matrix.package }}
        run: |
          dotnet restore -r linux-x64 ${{ matrix.package }}/
          dotnet build -c Release --no-self-contained --no-restore ${{ matrix.package }}/

          if [ -d "${{matrix.package}}.Tests" ]; then
            dotnet restore -r linux-x64 ${{ matrix.package }}.Tests/
            dotnet build -c Release --no-self-contained --no-restore ${{ matrix.package }}.Tests/
          fi
  TestPackages:
    runs-on: ubuntu-latest
    needs: [BuildPackages, DetectChangedPackages]
    if: ${{ needs.DetectChangedPackages.outputs.DeploymentMatrix != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJson(needs.DetectChangedPackages.outputs.DeploymentMatrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Test ${{ matrix.package }}
        run: |
          if [ -d "${{matrix.package}}.Tests" ]; then
            dotnet test -c Debug ${{ matrix.package }}.Tests/
          fi
  PublishPackages:
    runs-on: ubuntu-latest
    needs: [DetectChangedPackages, BuildPackages, TestPackages]
    if: github.ref == 'refs/heads/master' && needs.DetectChangedPackages.outputs.DeploymentMatrix != '[]'
    strategy:
      matrix:
        package: ${{ fromJson(needs.DetectChangedPackages.outputs.DeploymentMatrix) }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Publish package
        run: |
          dotnet restore -r linux-x64 ${{ matrix.package }}/
          dotnet build -c Release --no-self-contained --no-restore ${{ matrix.package }}/
          dotnet pack -c Release --nologo --include-symbols --no-restore --no-build ${{ matrix.package }}/
          dotnet nuget push ${{ matrix.package }}/bin/Release/*.nupkg --skip-duplicate
